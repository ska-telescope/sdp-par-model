image: $SKA_K8S_TOOLS_BUILD_DEPLOY

variables:
  GIT_SUBMODULE_STRATEGY: recursive

stages:
- lint
- test
- scan
- build
- publish

include:
  - project: 'ska-telescope/templates-repository'
    file:
      # Python jobs
      - 'gitlab-ci/includes/python.gitlab-ci.yml'
      # Documentation build jobs
      - 'gitlab-ci/includes/docs-build.gitlab-ci.yml'
      # Release jobs
      - 'gitlab-ci/includes/release.gitlab-ci.yml'
      # Finaliser job
      - 'gitlab-ci/includes/finaliser.gitlab-ci.yml'


# Execute all available code. Most of our "tests" are actually the
# notebooks, so we use the nbval extension to pull them into py.test.
# This has the advantage that we can generate coverage statistics for
# the entire thing.
#
# Unfortunately, there currently seems to be some flakiness to this:
# Sometimes a notebook fails to start, reporting "RuntimeError: Kernel
# didn't respond in 60 seconds". There's open tickets on similar
# issues, so maybe this is going to away eventually. For the moment,
# simply retrying a couple of times seems to fix it. This likely means
# that we spin a bit if something goes wrong systematically, but
# better than dealing with random false positives...
notebook-test:
  stage: test
  tags: [k8srunner]
  script:
    - poetry config virtualenvs.in-project true
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - poetry install --with=dev
    - PYTHONPATH=src pytest --verbose --color=yes --junitxml=junit.xml
        --cov=sdp_par_model --cov-report=term --cov-report=html
        -n 4 --dist loadscope --nbval-lax
        notebooks/SKA1_Export.ipynb
        notebooks/SKA1_SDP_Products.ipynb
        notebooks/SKA1_Imaging_Performance_Model.ipynb
        notebooks/SKA1_Scheduling.ipynb
        tests
  artifacts:
    paths: [htmlcov/, junit.xml]
    reports:
      junit: junit.xml

# Generate GitLab pages. This is done only for the master. On this
# occasion, we export:
#
# 1. The Sphinx documentation (root)
# 2. All the notebooks (note that this will re-run them)
# 3. Coverage reports
pages:
  stage: publish
  tags: [k8srunner]
  #only: [master]
  dependencies: [notebook-test] # For coverage
  script:
    - poetry config virtualenvs.in-project true
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - poetry install --with=docs
    # Make notebooks
    - make -j 4 -k -C notebooks notebooks_html
    # Copy all into "public"
    - cp -R docs/_build/html public
    - cp -R notebooks/out public/notebooks
    - cp -R htmlcov public
  artifacts:
    paths: [public/]
    expire_in: 1 week
