fpprintprec : 4 $
ratprint: false$


geometry : [ We = 7.27e-5,
             Re = 6400e3,
             WCurve= (Bmax/2)**2 / (2*Re) ,
             TSnapMin = WCurve / ( Bmax * We /2)];

uvsize : [ ThetaFOV = lambdasubmax / Ds * 2*(3.83/ %pi) * Qfov,
           ThetaBeam = lambdasubmin / (Bmax * (2/3)),
           ThetaPix = ThetaBeam  / 2 / QPix,
           NPix = ThetaFOV / ThetaPix];


continuum : [ /*  Ratio of FoV / Beam at single frequency, different to ThetaBeam/ThetaFOV */
              FOVBeam =  1/ ((2*(3.83/ %pi) * Qfov / Ds) /  ( 1 / (Bmax * 2/3))),
              /* Rao thesis Eq 5.2 */
              /* log-spaced channels */
              Nfbw = log(lambdamax/lambdamin) / log(1+FOVBeam/ Qbw) ];

convksize : [ NGWfn (w, eta )  := 2 * sqrt (( ((w * ThetaFOV/2))**2 + (w * ThetaFOV/2 )/(3.14 *eta/sqrt(w))))  * ThetaFOV,
              DeltaWMax = (Bmax * We * Tsnap *Qw )/(2 * lambdasubmin)] ;

floprate : [ RFLOP= 2 * NMajor * Npp * Nbeam * ( RGrid + Nfin *  RCCF  + Nfout * (RFFT + RRP))  ,
             RGrid = Nvis   * (NGW**2  + NAA**2) * Nmm * 8,
             Nvis  =  (Nfout * fBShort + Nfin*(1-fBShort)) * Na * (Na -1 )  /(2*TDump) ,
             NGW = NGWfn(DeltaWMax, etaw ),
             FFTSnap = NPix**2 * log(NPix**2) / log(2) * 5,
             RFFT = FFTSnap / Tsnap,
             RRP = NPix**2 / Tsnap * 50 ,
             RCCF =  (Na * (Na -1 ) /2 ) * NCVFF ** 2 * log(NCVFF ** 2 ) / log(2) * Nmm * 5 / (TIon * QFCV),
             NCVFF = QGCF * sqrt( NGW**2 + NAA**2)];


fast : [ RFLOPFast = 2* Npp * Nbeam *  ( RGrid  + NfoutFast * FFTSnap / TDump )];

workingmem : [ MUVGrid = 16 * NPix**2,
               MWCache = NGW**3 * QGCF**3 * Nbeam * Nfin * 8, 
               MBufVis= 2 * Npp* Nbeam *Nvis * MVis  * TObs,
               RIO = NMajor * Npp* Nbeam *Nvis * MVis];


/* Not yet included in totals, subject to confirmation of the number
of sources that need to be subtracted*/
dftsub  : [  RDFTSub = 64 * Ns * Nvis * Npp  * NMajor * Nbeam ];


GeneralBaseline: [MVis =12, TObs = 6 * 3600, 
                  NAA=9, 
                  Nmm=4,
                  etaw=0.01, QGCF=8, QFCV=10,
                  TIon=60, Qw=1, Npp=4, fBShort=0.5, Nfcorr=256000 ];

/* Spectral line case has only major cycle, Field-of-view only up to first null*/
SpecBaseline : [NMajor=1, Qfov=1, Nfin=Nfcorr, Nfout=Nfcorr, QPix=2.5 ];

ContBaseline: [Nfin=Nfbw, Qbw=1, Qfov=1.8, Nfout=500, NMajor=10 ,QPix=2.5 ];

FastBaseline: [Nfin=Nfbw, Qbw=1, Qfov=0.9, QPix=1.5, Nfout=500, NMajor=1];

/* Some scenarios to run */
SKA1LowSpec : append([ TDump = 0.6, Na = 1024 , Nbeam=1, Ds=35,
                       lambdasubmax = 3, lambdasubmin = 3, lambda = 3,
                       Bmax=1e5] , GeneralBaseline, SpecBaseline) ;

SKA1LowCont : append([ TDump = 0.6, Na = 1024 , Nbeam=1, Ds=35,
                       lambdamax = 6, lambdamin = 0.857, 
                       lambdasubmax = 3, lambdasubmin = 3, lambda = 3,
                       Bmax=1e5] , GeneralBaseline, ContBaseline) ;

SKA1LowFast : append([ TDump = 0.6, Na = 1024 , Nbeam=1, Ds=35,
                       lambdamax = 6, lambdamin = 0.857, 
                       lambdasubmax = 3, lambdasubmin = 3, lambda = 3,
                       Bmax=1e5] , GeneralBaseline, FastBaseline) ;

SKA1MidSpec : append([ TDump = 0.08, Na = 254 ,  Nbeam=1, Ds=15,
                           lambdasubmax = 0.3, lambdasubmin = 0.3, lambda = 0.3,
                           Bmax=2e5] , GeneralBaseline, SpecBaseline) ;

/* Band 1*/
SKA1MidCont1 : append([ TDump = 0.08, Na = 254 ,  Nbeam=1, Ds=15,
                        lambdamax = 0.8, lambdamin = 0.2, 
                        lambdasubmax = 0.3, lambdasubmin = 0.3, lambda = 0.3,                        
                        Bmax=2e5] , GeneralBaseline, ContBaseline) ;

SKA1MidFast1 : append([ TDump = 0.08, Na = 254 ,  Nbeam=1, Ds=15,
                        lambdamax = 0.8, lambdamin = 0.2, 
                        lambdasubmax = 0.3, lambdasubmin = 0.3, lambda = 0.3,                                   Bmax=2e5] , GeneralBaseline, FastBaseline) ;

SKA1MidCont2 : append([ TDump = 0.08, Na = 254 ,  Nbeam=1, Ds=15,
                        lambdamax = 0.316, lambdamin = 0.17, lambda = 0.3,
                        lambdasubmax = 0.3, lambdasubmin = 0.3, lambda = 0.3,                                                
                        Bmax=2e5] , GeneralBaseline, ContBaseline) ;
                         
SKA1SurveySpec : append([ TDump = 0.3, Na = 96 , Nbeam=36, Ds=15,
                          lambdasubmax = 0.3, lambdasubmin = 0.3, lambda = 0.3,
                             Bmax=0.5e5],  GeneralBaseline, SpecBaseline);

SKA1SurveyCont : append([ TDump = 0.3, Na = 96 , Nbeam=36, Ds=15,
                           lambdamax = 0.4, lambdamin = 0.1, 
                           lambdasubmax = 0.3, lambdasubmin = 0.3, lambda = 0.3,
                           Bmax=0.5e5 ],  GeneralBaseline, ContBaseline);


/* Find root of function f if bracketed by l and h otherwise return  l  */
find_root_or_min(f, x, l, h):= block( [fl, fh],
  fl: ev(f, ev([x =l]),eval),
  fh: ev(f, ev([x =h])),
  if fl*fh > 0 then return (l) else return (find_root (f, x, l, h) ));

TelRun(T) := block ( [s, xx1, muv, fev],
  /* First find the optimum snapshot duration. xx1 is function to minimise, s is the duration */
  xx1: diff(ev(RFLOP, floprate, geometry, uvsize, convksize, workingmem, continuum, T,infeval), Tsnap),
  s: find_root_or_min (xx1, Tsnap, ev(TSnapMin, T, geometry, infeval), 1000),
  /* Then create a function to evaluate requirements at optimum snapshot duration*/
  fev(P) := float(ev(P, floprate, workingmem, geometry, uvsize, convksize, continuum, T, infeval, Tsnap=s)),
  [RFLOP=fev(RFLOP),
  Tsnap =s,
  MUVGrid=fev(MUVGrid),
  RIO=fev(RIO),
  MBufVis = fev(MBufVis),
  MWCache= fev(MWCache),
  Nfin = fev(Nfin),
  RcuFLOPMin = fev(2 * NMajor * (RFFT + RRP)  )]);

DesignEq(Tc, Ts) := block( [ s, c, tf],
  c: TelRun(Tc),
  s: TelRun(Ts),
  tf:assoc(RFLOP, c) + assoc(RFLOP, s),
  [TotFLOP=tf,
   TotMemBW  =2*(assoc(RFLOP, c) + assoc(RFLOP, s)),
   TotBufVis = (assoc(MBufVis, c) + assoc(MBufVis, s)),
   BufIO = max(assoc(RIO, c) * tf /assoc(RFLOP, c)   + assoc(RIO, s)* tf /assoc(RFLOP, s) )   ,
   MemWorkU = max(assoc(MUVGrid, c) + assoc(MUVGrid, s)),
   RFLOPU   = ev( RcuFLOPMin,c)]);
 

/* Take a parameter list and remove the parameter */
DeletePar(P, T) := delete( P= ''assoc(P, T), T);

/* Scales parameter and returns revised key outputs */
DiffPar(T, P, f) := TelRun ( append(DeletePar(P,T) , [P=assoc(P, T)*f]));


TelRun(SKA1LowCont);
TelRun(SKA1LowSpec);

TelRun(SKA1MidCont1);
TelRun(SKA1MidCont2);
TelRun(SKA1MidSpec);



TelRun(SKA1SurveyCont);
TelRun(SKA1SurveySpec);


DesignEq(SKA1LowCont, SKA1LowSpec); DesignEq(SKA1MidCont2, SKA1MidSpec); DesignEq(SKA1SurveyCont, SKA1SurveySpec);


DiffPar(SKA1LowSpec, Bmax, 0.5);





map (tex, append(geometry, uvsize, continuum, convksize, floprate, workingmem) );
